services:
  engine:
    restart: unless-stopped
    container_name: engine
    build: .
    environment:
      - DATABASE_URL=host=liora port=${DB_PORT} password=${POSTGRES_PASSWORD} user=${POSTGRES_USER} dbname=${POSTGRES_DB} sslmode=disable
      - REDIS_URL=redis://redis:${REDIS_PORT}
      - TEST_DATABASE_URL=host=liora-test port=${TEST_POSTGRES_PORT} password=${TEST_POSTGRES_PASSWORD} user=${TEST_POSTGRES_USER} dbname=${TEST_POSTGRES_DB} sslmode=disable
    ports:
      - "127.0.0.1:${HOST_PORT}:40000"
    depends_on:
      liora:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:40000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M

  liora:
    restart: unless-stopped
    container_name: liora
    image: postgres:15-alpine
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "127.0.0.1:${DB_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  liora-test:
    restart: unless-stopped
    container_name: liora-test
    image: postgres:15-alpine
    environment:
      - POSTGRES_PASSWORD=${TEST_POSTGRES_PASSWORD}
      - POSTGRES_USER=${TEST_POSTGRES_USER}
      - POSTGRES_DB=${TEST_POSTGRES_DB}
    ports:
      - "127.0.0.1:${TEST_POSTGRES_PORT}:34567"

  redis:
    restart: unless-stopped
    container_name: redis
    image: redis:7-alpine
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redisdata:/data
    ports:
      - "127.0.0.1:${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

networks:
  app-network:
    name: server_network
    driver: bridge

volumes:
  pgdata: {}
  go-mod-cache: {}
  redisdata: {}
